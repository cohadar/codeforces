## D
FIRST: (.java)
	18:06 - started
	18:33 - started coding
	19:10 - done recursive algo, not yet correct
	19:16 - recursive correct, is there dp solution?
			Wrong answer on pretest 4 !!!
	19:30 - I think I fixed it, nope, still same error.
	19:38 - failed, basically because I did not write out edge cases on paper first.
	-----
	21:21 - long debugging and testing does not help, you need to break things with your mind first anyways.
	21:43 - Time limit exceeded on test 11 (much better, correct recursive solution, with pure brain)
	22:09 - made random big of size 10 (result: 35.99978)
	22:23 - done memoization, but still: Time limit exceeded on test 11 (local n=2000 takes 2.3s, so I need to optimize a bit)
	22:39 - new Double[2000][2000][4]; // takes 1.7s, such slow allocation.
	22:41 - new double[2000][2000][4]; // takes 0.6s, much better.
	22:43 - speed ok, but this time I got: Memory limit exceeded on test 11
	22:51 - ok I fixed the mem limit, but now I got: Time limit exceeded on test 11
	23:22 - used larger array to speed memoization, but got: Memory limit exceeded on test 11
	23:54 - mem limit again.
	00:07 - time limit.
	00:24 - mem limit, but improved, put shorter array index first.
	00:44 - memoization gave me bad matrix size, will try with later with dp.
	-----
	07:06 - let's try diagonal matrix packing for the sake of exercise
	07:12 - Wrong answer on test 11, very interesting. (could be because float vs double precision) 
			double: 3998.6443258819663 float: 3998.6445
	07:23 - ofc, with double: Memory limit exceeded on test 11
	07:48 - the trick is to use 2 dp matrices.